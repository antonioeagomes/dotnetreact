{"version":3,"sources":["app/models/activity.ts","app/models/pagination.ts","app/api/agent.ts","app/models/profile.ts","app/stores/activityStore.ts","app/stores/userStore.ts","app/stores/store.ts","app/stores/commonStore.ts","app/stores/modalStore.ts","app/stores/commentStore.ts","app/layout/NavBar.tsx","features/profiles/ProfileCard.tsx","features/activities/dashboard/ActivityListItemAttendee.tsx","features/activities/dashboard/ActivityListItem.tsx","features/activities/dashboard/ActivityList.tsx","features/activities/dashboard/ActivityFilter.tsx","features/activities/dashboard/ActivityListItemPlaceholder.tsx","features/activities/dashboard/ActivityDashboard.tsx","app/common/form/MyTextInput.tsx","features/users/LoginForm.tsx","features/errors/ValidationErrors.tsx","features/users/RegisterForm.tsx","features/home/HomePage.tsx","app/layout/LoadingComponent.tsx","app/common/form/MyTextArea.tsx","app/common/form/MySelectInput.tsx","app/common/options/categoryOptions.ts","app/common/form/MyDateTimeInput.tsx","features/activities/form/ActivityForm.tsx","features/activities/details/ActivityDetailedChat.tsx","features/activities/details/ActivityDetailedHeader.tsx","features/activities/details/ActivityDetailedInfo.tsx","features/activities/details/ActivityDetailedSidebar.tsx","features/activities/details/ActivityDetails.tsx","features/errors/NotFound.tsx","features/errors/ServerError.tsx","app/common/modals/ModalContainer.tsx","app/layout/PrivateRoute.tsx","app/layout/App.tsx","reportWebVitals.ts","app/layout/ScrollToTop.tsx","index.tsx"],"names":["Activity","init","Object","assign","this","ActivityFormValues","activity","id","undefined","title","date","description","category","city","venue","PaginatedResult","data","pagination","PagingParams","pageNumber","pageSize","axios","defaults","baseURL","process","interceptors","request","use","config","token","store","commonStore","headers","Authorization","response","a","JSON","parse","error","status","toast","method","errors","hasOwnProperty","history","push","modalStateErrors","key","flat","setServerError","Promise","reject","responseBody","requests","url","get","then","body","post","put","delete","agent","Activities","list","params","details","create","update","attend","Account","current","login","user","register","Profiles","updateFollowing","username","Profile","displayName","image","ActivityStore","activityRegistry","Map","selectedActivity","editMode","loading","loadingInitial","pagingParams","predicate","set","setPagingParams","loadActivities","setLoadingInitial","axiosParams","result","forEach","setActivity","setPagination","console","log","setPredicate","value","resetPredicate","loadActivity","getActivity","setSelectedActivity","userStore","isGoing","attendees","some","isHost","hostUsername","host","find","x","Date","state","setLoading","setEditMode","createActivity","attendee","newActivity","runInAction","updateActivity","updatedActivity","deleteActivity","updateAttendance","filter","u","cancelActivityToggle","isCancelled","clearSelectedActivity","updateAttendeeFollowing","following","followersCount","makeAutoObservable","reaction","keys","clear","URLSearchParams","append","toString","toISOString","groupActivitiesByDate","Array","from","values","activities","sortedActivities","sort","b","getTime","entries","reduce","split","UserStore","creds","setToken","modalStore","closeModal","logout","localStorage","removeItem","getUser","activityStore","getItem","appLoaded","setAppLoaded","setItem","modal","open","openModal","content","commentStore","comments","hubConnection","createHubConnection","activityId","HubConnectionBuilder","withUrl","accessTokenFactory","withAutomaticReconnect","configureLogging","LogLevel","Information","build","start","catch","on","c","createdAt","comment","unshift","stopHubConnection","stop","clearComments","addComment","invoke","StoreContext","createContext","useStore","useContext","observer","Menu","inverted","fixed","Container","Item","as","NavLink","to","exact","header","src","alt","style","marginRight","name","Button","positive","position","Image","avatar","spaced","Dropdown","pointing","text","Link","icon","onClick","profile","Card","Content","Header","Description","bio","extra","Icon","styles","borderColor","borderWidth","List","horizontal","map","Popup","hoverable","trigger","size","circular","bordered","ActivityListItem","Segment","Group","Label","attached","color","textAlign","marginBottom","basic","format","secondary","clearing","floated","activitiesByDate","group","sub","divided","vertical","with","marginTop","active","has","onChange","ActivityListItemPlaceholder","Placeholder","fluid","minHeight","Line","Paragraph","disabled","useState","loadingNext","setLoadingNext","useEffect","Grid","Column","width","pageStart","loadMore","currentPage","hasMore","totalPages","initialLoad","Loader","MyTextInput","props","useField","field","meta","Form","Field","touched","label","initialValues","email","password","onSubmit","setErrors","handleSubmit","isSubmitting","className","autoComplete","placeholder","type","render","ValidationErrors","Message","err","i","validationSchema","Yup","required","isValid","dirty","isLoggedIn","LoadingComponent","Dimmer","MyTextArea","MySelectInput","helpers","Select","clearable","options","e","d","setValue","onBlur","setTouched","categoryOptions","MyDateTimeInput","selected","useHistory","useParams","categoty","nullable","enableReinitialize","uuid","handleFormSubmit","rows","placeholderText","showTimeSelect","timeCaption","dateFormat","border","resetForm","Comment","Avatar","Author","Metadata","formatDistanceToNow","Text","whiteSpace","activityImageStyle","activityImageTextStyle","bottom","left","height","padding","zIndex","top","ribbon","verticalAlign","length","relaxed","Extra","NotFound","Inline","primary","message","Modal","onClose","PrivateRoute","Component","component","rest","location","useLocation","finally","hideProgressBar","path","HomePage","ActivityDashboard","ActivityDetails","ActivityForm","ServerError","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ScrollToTop","pathname","window","scrollTo","createBrowserHistory","ReactDOM","Provider","document","getElementById"],"mappings":"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","file":"static/js/main.66bec077.chunk.js","sourcesContent":["import {Profile} from './profile';\n\nexport interface Activity {\n    id: string;\n    title: string;\n    date: Date | null;\n    description: string;\n    category: string;\n    city: string;\n    venue: string;\n    hostUsername: string;\n    isCancelled: boolean;\n    isGoing: boolean;\n    isHost: boolean;\n    host?: Profile;\n    attendees?: Profile[];\n  }\n\n  export class Activity implements Activity\n  {\n    constructor(init?: ActivityFormValues) {\n      Object.assign(this, init);\n    }\n  }\n\n  export class ActivityFormValues {\n    id?: string = undefined;\n    title: string = '';\n    date: Date | null = null;\n    description: string = '';\n    category: string = '';\n    city: string = '';\n    venue: string = '';\n\n    constructor(activity?: ActivityFormValues){\n      if (activity) {\n        this.id = activity.id;\n        this.title = activity.title;\n        this.date = activity.date;\n        this.description = activity.description;\n        this.category = activity.category;\n        this.city = activity.city;\n        this.venue = activity.venue;\n      } \n    }\n  }","export interface Pagination {\n    currentPage: number;\n    itemsPerPage: number;\n    totalItems: number;\n    totalPages: number;\n}\n\nexport class PaginatedResult<T> {\n    data: T;\n    pagination: Pagination;\n\n    constructor(data: T, pagination: Pagination){\n        this.data = data;\n        this.pagination = pagination;\n    }\n}\n\nexport class PagingParams {\n    pageNumber;\n    pageSize;\n    \n    constructor(pageNumber = 1, pageSize = 10) {\n        this.pageNumber = pageNumber;\n        this.pageSize = pageSize;\n    }\n}","import axios, { AxiosError, AxiosResponse } from \"axios\";\nimport { toast } from \"react-toastify\";\nimport { history } from \"../..\";\nimport { Activity, ActivityFormValues } from \"../models/activity\";\nimport { PaginatedResult } from \"../models/pagination\";\nimport { User, UserFormValues } from \"../models/user\";\nimport { store } from \"../stores/store\";\n\nconst sleep = (delay: number) => {\n  return new Promise((resolve) => {\n    setTimeout(resolve, delay);\n  });\n};\n\naxios.defaults.baseURL = process.env.REACT_APP_API_URL;\n\naxios.interceptors.request.use(config => {\n  const token = store.commonStore.token;\n  if (token) config.headers.Authorization = `Bearer ${token}`;\n  return config;\n})\n\naxios.interceptors.response.use(\n  async (response) => {\n    if(process.env.NODE_ENV === 'development') await sleep(1000);\n    \n    const pagination = response.headers['pagination'];\n    if(pagination)\n    {\n      response.data = new PaginatedResult(response.data, JSON.parse(pagination));\n      return response as AxiosResponse<PaginatedResult<any>>\n    }\n    return response;\n  },\n  (error: AxiosError) => {\n    const { data, status, config } = error.response!;\n    switch (status) {\n      case 400:\n        if (typeof data === 'string') toast.error(data);\n        if (config.method === \"get\" && data.errors.hasOwnProperty(\"id\")) {\n          history.push('/not-found')\n        }\n        if (data.errors) {\n          const modalStateErrors = [];\n          for (const key in data.errors) {\n            if (data.errors[key]) {\n              modalStateErrors.push(data.errors[key])\n            }\n          }\n          throw modalStateErrors.flat();\n        } else {\n          toast.error(\"Bad Request: \" + data);\n        }\n        break;\n      case 401:\n        toast.error(\"Unauthorized\");\n        break;\n      case 404:\n        toast.error(\"Not Found\");\n        history.push('/not-found');\n        break;\n      case 500:\n        toast.error(\"Server Error\");\n        store.commonStore.setServerError(data);\n        history.push('/server-error');\n        break;\n      default:\n        break;\n    }\n    return Promise.reject(error);\n  }\n);\n\nconst responseBody = <T>(response: AxiosResponse<T>) => response.data;\nconst requests = {\n  get: <T>(url: string) => axios.get<T>(url).then(responseBody),\n  post: <T>(url: string, body: {}) =>\n    axios.post<T>(url, body).then(responseBody),\n  put: <T>(url: string, body: {}) => axios.put<T>(url, body).then(responseBody),\n  delete: <T>(url: string) => axios.delete<T>(url).then(responseBody),\n};\n\nconst Activities = {\n  list: (params: URLSearchParams) => axios.get<PaginatedResult<Activity[]>>(\"/activities\", {params})\n    .then(responseBody),\n  details: (id: string) => requests.get<Activity>(`/activities/${id}`),\n  create: (activity: ActivityFormValues) => requests.post<void>(\"/activities\", activity),\n  update: (activity: ActivityFormValues) =>\n    requests.put<void>(`/activities/${activity.id}`, activity),\n  delete: (id: string) => requests.delete<void>(`/activities/${id}`),\n  attend: (id: string) => requests.post<void>(`/activities/${id}/attend`, {})\n};\n\nconst Account = {\n  current: () => requests.get<User>('/account'),\n  login: (user: UserFormValues) => requests.post<User>('/account/login', user),\n  register: (user: UserFormValues) => requests.post<User>('/account/register', user),\n}\n\nconst Profiles = {\n  updateFollowing: (username: string) => requests.post(`/follow/${username}`, {})\n}\n\nconst agent = {\n  Activities,\n  Account,\n  Profiles\n};\n\nexport default agent;\n","import { User } from \"./user\";\n\nexport interface Profile {\n    username: string;\n    displayName: string;\n    image?: string;\n    bio?: string;\n    followersCount: number;\n    followingsCount: number;\n    following: boolean;\n}\n\nexport class Profile implements Profile {\n    constructor(user: User){\n        this.username = user.username;\n        this.displayName = user.displayName;\n        this.image = user.image;\n    }\n}","import { makeAutoObservable, reaction, runInAction } from \"mobx\";\nimport { Activity, ActivityFormValues } from \"../models/activity\";\nimport agent from \"../api/agent\";\nimport { store } from \"./store\";\nimport { Profile } from \"../models/profile\";\nimport { Pagination, PagingParams } from \"../models/pagination\";\n\nexport default class ActivityStore {\n  activityRegistry = new Map<string, Activity>();\n  selectedActivity: Activity | undefined = undefined;\n  editMode = false;\n  loading = false;\n  loadingInitial = false;\n  pagination: Pagination | null = null;\n  pagingParams = new PagingParams();\n  predicate = new Map().set('all', true);\n\n\n  constructor() {\n    makeAutoObservable(this);\n\n    reaction(\n      () => this.predicate.keys(),\n      () => {\n        this.pagingParams = new PagingParams();\n        this.activityRegistry.clear();\n        this.loadActivities();\n      })\n  }\n\n  setPagingParams = (pagingParams: PagingParams) => {\n    this.pagingParams = pagingParams;\n  }\n\n  get axiosParams() {\n    const params = new URLSearchParams();\n    params.append('pageNumber', this.pagingParams.pageNumber.toString());\n    params.append('pageSize', this.pagingParams.pageSize.toString());\n    this.predicate.forEach((value, key) => {\n      if (key === 'startDate') {\n        params.append(key, (value as Date).toISOString());\n      } else {\n        params.append(key, value);\n      }\n    })\n    return params;\n  }\n\n  get activitiesByDate() {\n    return this.groupActivitiesByDate(Array.from(this.activityRegistry.values()))\n  }\n\n  groupActivitiesByDate(activities: Activity[]) {\n    const sortedActivities = activities.sort(\n      (a, b) => a.date!.getTime() - b.date!.getTime()\n    )\n    return Object.entries(sortedActivities.reduce((activities, activity) => {\n      const date = activity.date!.toISOString().split('T')[0];\n      activities[date] = activities[date] ? [...activities[date], activity] : [activity];\n      return activities;\n    }, {} as { [key: string]: Activity[] }));\n  }\n\n\n\n  loadActivities = async () => {\n    this.setLoadingInitial(true);\n    try {\n      const result = await agent.Activities.list(this.axiosParams);\n      result.data.forEach((a) => {\n        this.setActivity(a)\n      });\n      this.setPagination(result.pagination);\n      this.setLoadingInitial(false);\n    } catch (error) {\n      console.log(error);\n      this.setLoadingInitial(false);\n    }\n  };\n\n  setPagination = (pagination: Pagination) => {\n    this.pagination = pagination;\n  }\n\n  setPredicate = (predicate: string, value: string | Date) => {\n    const resetPredicate = () => {\n      this.predicate.forEach((value,key) => {\n        if(key !== 'startDate') this.predicate.delete(key);\n      })\n    }\n    switch (predicate) {\n      case 'all':\n        resetPredicate();\n        this.predicate.set('all', true);\n        break;\n\n      case 'isGoing':\n        resetPredicate();\n        this.predicate.set('isGoing', true);\n        break;\n      \n      case 'isHost':\n        resetPredicate();\n        this.predicate.set('isHost', true);\n        break;\n      \n      case 'startDate':\n        this.predicate.delete('startDate');\n        this.predicate.set('startDate', value);\n        break;\n\n      default:\n        break;\n    }\n  }\n\n  loadActivity = async (id: string) => {\n    let activity = this.getActivity(id);\n\n    if (activity) {\n      this.setSelectedActivity(activity);\n      return activity;\n    } else {\n      this.setLoadingInitial(true);\n\n      try {\n        activity = await agent.Activities.details(id);\n        this.setActivity(activity);\n        this.setSelectedActivity(activity);\n        this.setLoadingInitial(false);\n        return activity;\n      } catch (error) {\n        console.log(error);\n        this.setLoadingInitial(false);\n      }\n    }\n  };\n\n  private getActivity = (id: string) => {\n    return this.activityRegistry.get(id);\n  };\n\n  private setActivity = (activity: Activity) => {\n    const user = store.userStore.user;\n    if (user) {\n      activity.isGoing = activity.attendees!.some(\n        a => a.username === user.username\n      );\n\n      activity.isHost = activity.hostUsername === user.username;\n      activity.host = activity.attendees!.find(x => x.username === activity.hostUsername);\n    }\n    activity.date = new Date(activity.date!);\n    this.activityRegistry.set(activity.id, activity);\n  };\n\n  setSelectedActivity(activity: Activity) {\n    this.selectedActivity = activity;\n  }\n\n  setLoadingInitial = (state: boolean) => {\n    this.loadingInitial = state;\n  };\n\n  setLoading = (state: boolean) => {\n    this.loading = state;\n  };\n\n  setEditMode = (state: boolean) => {\n    this.editMode = state;\n  };\n\n  createActivity = async (activity: ActivityFormValues) => {\n    const user = store.userStore.user;\n    const attendee = new Profile(user!);\n    try {\n      await agent.Activities.create(activity);\n      const newActivity = new Activity(activity);\n      newActivity.hostUsername = user!.username;\n      newActivity.attendees = [attendee];\n      this.setActivity(newActivity);\n\n      runInAction(() => {\n        this.selectedActivity = newActivity;\n      });\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  updateActivity = async (activity: ActivityFormValues) => {\n    try {\n      await agent.Activities.update(activity);\n      runInAction(() => {\n        if (activity.id) {\n          let updatedActivity = { ...this.getActivity(activity.id), ...activity }\n          this.activityRegistry.set(activity.id, updatedActivity as Activity);\n          this.selectedActivity = updatedActivity as Activity;\n        }\n      });\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  deleteActivity = async (id: string) => {\n    this.setLoading(true);\n\n    try {\n      await agent.Activities.delete(id);\n      runInAction(() => {\n        this.activityRegistry.delete(id);\n        this.selectedActivity = undefined;\n      });\n      this.setEditMode(false);\n      this.setLoading(false);\n    } catch (error) {\n      console.log(error);\n      this.setEditMode(false);\n      this.setLoading(false);\n    }\n  };\n\n  updateAttendance = async () => {\n    const user = store.userStore.user;\n    this.loading = true;\n    try {\n      await agent.Activities.attend(this.selectedActivity!.id);\n\n      runInAction(() => {\n        if (this.selectedActivity?.isGoing) {\n          this.selectedActivity.attendees\n            = this.selectedActivity.attendees?.filter(u => u.username !== user?.username);\n          this.selectedActivity.isGoing = false;\n        } else {\n          const attendee = new Profile(user!);\n          this.selectedActivity?.attendees?.push(attendee);\n          this.selectedActivity!.isGoing = true;\n        }\n\n        this.activityRegistry.set(this.selectedActivity!.id, this.selectedActivity!)\n      })\n\n    } catch (error) {\n\n    } finally {\n      runInAction(() => this.loading = false);\n    }\n  }\n\n  cancelActivityToggle = async () => {\n    this.loading = true;\n    try {\n      await agent.Activities.attend(this.selectedActivity!.id);\n\n      runInAction(() => {\n        this.selectedActivity!.isCancelled = !this.selectedActivity?.isCancelled;\n        this.activityRegistry.set(this.selectedActivity!.id, this.selectedActivity!)\n      })\n    } catch (error) {\n      console.log(error)\n    }\n    finally {\n      runInAction(() => this.loading = false)\n    }\n  }\n\n  clearSelectedActivity = () => {\n    this.selectedActivity = undefined;\n  }\n\n  updateAttendeeFollowing = (username: string) => {\n    this.activityRegistry.forEach(activity => {\n      activity.attendees?.forEach(attendee => {\n        if (attendee.username === username) {\n          attendee.following ? attendee.followersCount-- : attendee.followersCount++;\n          attendee.following = !attendee.following;\n        }\n      })\n    })\n  }\n}\n","import { makeAutoObservable, runInAction } from \"mobx\";\nimport { history } from \"../..\";\nimport agent from \"../api/agent\";\nimport { User, UserFormValues } from \"../models/user\";\nimport { store } from \"./store\";\n\nexport default class UserStore {\n    user: User | null = null;\n\n    constructor() {\n        makeAutoObservable(this);\n    }\n\n    get isLoggedIn() {\n        return !!this.user;\n    }\n\n    login = async (creds: UserFormValues) => {\n        try {\n            const user = await agent.Account.login(creds);\n            store.commonStore.setToken(user.token);\n            runInAction(() => this.user = user)\n            history.push('/activities')\n            store.modalStore.closeModal();\n        } catch (error) {\n            throw error;\n        }\n    }\n\n    logout = () => {\n        store.commonStore.setToken(null);\n        localStorage.removeItem('jwt');\n        this.user = null;\n        history.push('/')\n    }\n\n    getUser = async () => {\n        try {\n            const user = await agent.Account.current();\n            runInAction(() => this.user = user);\n        } catch (error) {\n            console.log(error);\n        }\n    }\n\n    register = async (creds: UserFormValues) => {\n        try {\n            const user = await agent.Account.register(creds);\n            store.commonStore.setToken(user.token);\n            runInAction(() => this.user = user)\n            history.push('/activities')\n            store.modalStore.closeModal();\n        } catch (error) {\n            store.modalStore.closeModal();\n            throw error;\n        }\n    }\n}","import { createContext, useContext } from 'react';\nimport ActivityStore from './activityStore';\nimport CommentStore from './commentStore';\nimport CommonStore from './commonStore';\nimport ModalStore from './modalStore';\nimport UserStore from './userStore';\n\ninterface Store {\n    activityStore: ActivityStore;\n    commonStore: CommonStore;\n    userStore: UserStore;\n    modalStore: ModalStore;\n    commentStore: CommentStore;\n}\n\nexport const store: Store = {\n    activityStore: new ActivityStore(),\n    commonStore: new CommonStore(),\n    userStore: new UserStore(),\n    modalStore: new ModalStore(),\n    commentStore: new CommentStore()\n}\n\nexport const StoreContext = createContext(store);\n\nexport function useStore() {\n    return useContext(StoreContext);\n}","import { makeAutoObservable, reaction } from \"mobx\";\nimport { ServerError } from \"../models/serverError\";\n\nexport default class CommonStore {\n    error: ServerError | null = null;\n    token: string | null = localStorage.getItem('jwt');\n    appLoaded = false;\n\n    constructor() {\n        makeAutoObservable(this);\n\n        reaction(\n            () => this.token,\n            token => {\n                if (token) {\n                    localStorage.setItem('jwt', token);\n                } else {\n                    localStorage.removeItem('jwt');\n                }\n            }\n        )\n    }\n\n    setServerError = (error: ServerError) => {\n        this.error = error;\n    }\n\n    setToken = (token: string | null) => {\n        this.token = token;\n    }\n\n    setAppLoaded = () => {\n        this.appLoaded = true;\n    }\n\n}","import { makeAutoObservable } from \"mobx\"\n\ninterface Modal {\n    open: boolean;\n    body: JSX.Element | null;\n}\n\nexport default class ModalStore {\n    modal: Modal = {\n        open: false,\n        body: null\n    }\n\n    constructor() {\n        makeAutoObservable(this)        \n    }\n\n    openModal = (content: JSX.Element) => {\n        this.modal.open = true;\n        this.modal.body = content;\n    }\n\n    closeModal = () => {\n        this.modal.open = false;\n        this.modal.body = null;\n    }\n}","import { ChatComment } from \"../models/comment\";\nimport { HubConnection, HubConnectionBuilder, LogLevel } from \"@microsoft/signalr\";\nimport { makeAutoObservable, runInAction } from \"mobx\";\nimport { store } from \"./store\";\n\nexport default class CommentStore {\n    comments: ChatComment[] = [];\n    hubConnection: HubConnection | null = null;\n\n    constructor() {\n        makeAutoObservable(this);\n    }\n\n    createHubConnection = (activityId: string) => {\n        if (store.activityStore.selectedActivity) {\n            this.hubConnection = new HubConnectionBuilder()\n                .withUrl(process.env.REACT_APP_CHAT_URL + '?activityId=' + activityId, {\n                    accessTokenFactory: () => store.userStore.user?.token!\n                })\n                .withAutomaticReconnect()\n                .configureLogging(LogLevel.Information)\n                .build();\n\n            this.hubConnection.start().catch(error => console.log(\"Error to establishing the connection\", error));\n\n            this.hubConnection.on('LoadComments', (comments: ChatComment[]) => {\n                runInAction(() => {\n                    comments.forEach(c => {\n                        c.createdAt = new Date(c.createdAt + 'Z');\n                    })\n                    this.comments = comments\n                });\n            });\n\n            this.hubConnection.on(\"ReceiveComment\", (comment: ChatComment) => {\n                runInAction(() => {\n                    comment.createdAt = new Date(comment.createdAt);\n                    this.comments.unshift(comment);\n                })\n            });\n        }\n    }\n\n    stopHubConnection = () => {\n        this.hubConnection?.stop().catch(error => console.log(\"Error to stopping the connection\", error));\n    }\n\n    clearComments = () => {\n        this.comments = [];\n        this.stopHubConnection();\n    }\n\n    addComment = async (values: any) => {\n        values.activityId = store.activityStore.selectedActivity?.id;\n        try {\n            await this.hubConnection?.invoke('SendComment', values);\n        } catch (error) {\n            console.log(error)\n        }\n    }\n}","import { observer } from \"mobx-react-lite\";\nimport React from \"react\";\nimport { Link, NavLink } from \"react-router-dom\";\nimport { Button, Container, Dropdown, Image, Menu } from \"semantic-ui-react\";\nimport { useStore } from \"../stores/store\";\n\nexport default observer(function NavBar() {\n  const { userStore: { user, logout } } = useStore();\n  return (\n    <Menu inverted fixed=\"top\">\n      <Container>\n        <Menu.Item as={NavLink} to={\"/\"} exact header>\n          <img\n            src=\"/assets/logo.png\"\n            alt=\"logo\"\n            style={{ marginRight: \"1rem\" }}\n          />\n          Activities\n        </Menu.Item>\n        <Menu.Item as={NavLink} to={\"/activities\"} name=\"Activities\" />\n        <Menu.Item>\n          <Button\n            as={NavLink}\n            to={\"/createActivity\"}\n            positive\n            content=\"Criar Atividade\"\n          />\n        </Menu.Item>\n        <Menu.Item position='right'>\n          <Image src={user?.image || '/assets/user.png'} avatar spaced='right' />\n          <Dropdown pointing='top left' text={user?.displayName}>\n            <Dropdown.Menu>\n              <Dropdown.Item as={Link} to={`/profile/${user?.username}`} \n                text='Profile' icon='user' />\n              <Dropdown.Item onClick={logout} text='Logout' icon='power' />\n            </Dropdown.Menu>\n          </Dropdown>\n        </Menu.Item>\n      </Container>\n    </Menu>\n  );\n});\n","import { observer } from 'mobx-react-lite';\nimport React from 'react';\nimport { Link } from 'react-router-dom';\nimport { Card, Icon, Image } from 'semantic-ui-react';\nimport { Profile } from '../../app/models/profile';\ninterface Props {\n    profile: Profile\n}\n\nexport default observer(function ProfileCard({profile}: Props)\n{\n    return(\n        <Card as={Link} to={`/profiles/${profile.username}`}>\n            <Image src={profile.image || '/assets/user.png'} />\n            <Card.Content>\n                <Card.Header>\n                    {profile.displayName}\n                </Card.Header>\n                <Card.Description>\n                    {profile.bio}\n                </Card.Description>\n            </Card.Content>\n            <Card.Content extra>\n                <Icon name='user' />\n                {profile.followersCount} followers\n            </Card.Content>\n        </Card>\n    )\n})","import React from \"react\";\nimport { observer } from \"mobx-react-lite\";\nimport { List, Image, Popup } from \"semantic-ui-react\";\nimport { Profile } from \"../../../app/models/profile\";\nimport { Link } from \"react-router-dom\";\nimport ProfileCard from \"../../profiles/ProfileCard\";\n\ninterface Props {\n  attendees: Profile[];\n}\n\nexport default observer(function ActivityListItemAttendee({ attendees }: Props) {\n  const styles = {\n    borderColor: 'orange',\n    borderWidth: 2\n  }\n  return (\n    <List horizontal>\n      {attendees.map(attendee => (\n        <>\n          <Popup hoverable\n            key={attendee.username}\n            trigger={<List.Item key={attendee.username} as={Link} to={`/profiles/${attendee.username}`}>\n              <Image size=\"mini\"\n                circular bordered\n                style={attendee.following ? styles : null}\n                src={attendee.image || \"/assets/user.png\"} />\n            </List.Item>}\n          >\n            <Popup.Content>\n              <ProfileCard profile={attendee} />\n            </Popup.Content>\n          </Popup>\n        </>)\n      )}\n    </List>\n  );\n});\n","import { format } from 'date-fns';\nimport React from 'react';\nimport { Link } from 'react-router-dom';\nimport { Button, Icon, Item, Label, Segment } from 'semantic-ui-react';\nimport { Activity } from '../../../app/models/activity';\nimport  ActivityListItemAttendee  from './ActivityListItemAttendee';\n\ninterface Props {\n    activity: Activity\n}\n\nexport default function ActivityListItem({ activity }: Props) {\n    return (\n        <Segment.Group>\n            <Segment>\n                {\n                    activity.isCancelled && \n                    <Label attached='top' color='red' content='Cancelled'\n                        style={{textAlign:'center'}} />\n                }\n                <Item.Group>\n                    <Item>\n                        <Item.Image style={{marginBottom: 3}} size='tiny' circular src='/assets/user.png' />\n                        <Item.Content>\n                            <Item.Header as={Link} to={`/activities/${activity.id}`}>\n                                {activity.title}\n                            </Item.Header>\n                            <Item.Description> {`Hosted by: ${activity.host?.displayName}`} </Item.Description>\n                            {activity.isHost && (\n                                <Item.Description>\n                                    <Label basic color='orange'>\n                                        You are hosting this activity\n                                    </Label>\n                                </Item.Description>\n                            )}\n                            {activity.isGoing && !activity.isHost && (\n                                <Item.Description>\n                                    <Label basic color='green'>\n                                        You are going to this activity\n                                    </Label>\n                                </Item.Description>\n                            )}\n                        </Item.Content>\n                    </Item>\n                </Item.Group>\n            </Segment>\n            <Segment>\n                <span>\n                    <Icon name='clock' /> {format(activity.date!, 'dd MMM yyyy hh:mm')}\n                    <Icon name='map marker alternate' /> {activity.venue}\n                </span>\n            </Segment>\n            <Segment secondary>\n                <ActivityListItemAttendee attendees={activity.attendees!} />\n            </Segment>\n            <Segment clearing>\n                <span>{activity.description}</span>\n                <Button\n                    as={Link}\n                    to={`/activities/${activity.id}`}\n                    color='teal'\n                    floated='right'\n                    content='View'\n                />\n            </Segment>\n        </Segment.Group>\n    )\n}","import { observer } from \"mobx-react-lite\";\nimport React, { Fragment } from \"react\";\nimport { Header, Item, Segment } from \"semantic-ui-react\";\nimport { useStore } from \"../../../app/stores/store\";\nimport ActivityListItem from \"./ActivityListItem\";\n\nexport default observer(function ActivityList() {\n  const { activityStore } = useStore();\n  const { activitiesByDate } = activityStore;\n\n  return (\n    <>\n      {activitiesByDate.map(([group, activities]) => (\n        <Fragment key={group}>\n          <Header sub color='teal'>\n            {group}\n          </Header>\n          <Segment>\n            <Item.Group divided>\n              {activities.map((activity) => (\n                <ActivityListItem key={activity.id} activity={activity} />\n              ))}\n            </Item.Group>\n          </Segment>\n        </Fragment>\n      ))}\n    </>\n  );\n});\n","import { observer } from 'mobx-react-lite';\nimport React from 'react';\nimport Calendar from 'react-calendar';\nimport { Header, Menu } from 'semantic-ui-react';\nimport { useStore } from '../../../app/stores/store';\n\nexport default observer(function ActivityFilter() {\n    const { activityStore: { predicate, setPredicate } } = useStore();\n    return (\n        <>\n            <Menu vertical size='large' style={{ with: '100%', marginTop: 25 }}>\n                <Header icon='filter' attached color='teal' content='Filters' />\n                <Menu.Item\n                    content='All Activities'\n                    active={predicate.has('all')}\n                    onClick={() => setPredicate('all', 'true')}\n                />\n                <Menu.Item\n                    content='I am going'\n                    active={predicate.has('isGoing')}\n                    onClick={() => setPredicate('isGoing', 'true')}\n                />\n                <Menu.Item\n                    content='I am hosting'\n                    active={predicate.has('isHost')}\n                    onClick={() => setPredicate('isHost', 'true')}\n                />\n            </Menu>\n            <Header />\n            <Calendar\n                onChange={(date) => setPredicate('startDate', date as Date)}\n                value={predicate.get('startDate') || new Date()}\n            />\n        </>\n    )\n})","import React, { Fragment } from 'react';\nimport { Segment, Button, Placeholder } from 'semantic-ui-react';\n\nexport default function ActivityListItemPlaceholder() {\n    return (\n        <Fragment>\n            <Placeholder fluid style={{ marginTop: 25 }}>\n                <Segment.Group>\n                    <Segment style={{ minHeight: 110 }}>\n                        <Placeholder>\n                            <Placeholder.Header image>\n                                <Placeholder.Line />\n                                <Placeholder.Line />\n                            </Placeholder.Header>\n                            <Placeholder.Paragraph>\n                                <Placeholder.Line />\n                            </Placeholder.Paragraph>\n                        </Placeholder>\n                    </Segment>\n                    <Segment>\n                        <Placeholder>\n                            <Placeholder.Line />\n                            <Placeholder.Line />\n                        </Placeholder>\n                    </Segment>\n                    <Segment secondary style={{ minHeight: 70 }} />\n                    <Segment clearing>\n                        <Button disabled color='blue' floated='right' content='View' />\n                    </Segment>\n                </Segment.Group>\n            </Placeholder>\n        </Fragment>\n    );\n};","import { observer } from \"mobx-react-lite\";\nimport React, { useEffect, useState } from \"react\";\nimport { Grid, Loader } from \"semantic-ui-react\";\nimport { useStore } from \"../../../app/stores/store\";\nimport ActivityList from \"./ActivityList\";\nimport LoadingComponent from \"../../../app/layout/LoadingComponent\";\nimport ActivityFilter from \"./ActivityFilter\";\nimport { PagingParams } from \"../../../app/models/pagination\";\nimport InfiniteScroll from \"react-infinite-scroller\";\nimport ActivityListItemPlaceholder from \"./ActivityListItemPlaceholder\";\n\nexport default observer(function ActivityDashboard() {\n  const { activityStore } = useStore();\n  const { loadingInitial, activityRegistry, loadActivities,\n    setPagingParams, pagination } = activityStore;\n  const [loadingNext, setLoadingNext] = useState(false)\n\n  function handleGetNext() {\n    setLoadingNext(true);\n    setPagingParams(new PagingParams(pagination!.currentPage + 1));\n    loadActivities().then(() => setLoadingNext(false));\n  }\n\n  useEffect(() => {\n    if (activityRegistry.size <= 0) loadActivities();\n  }, [activityRegistry.size, loadActivities]);\n\n\n\n  return (\n    <Grid>\n      <Grid.Column width=\"10\">\n        {\n          loadingInitial && !loadingNext ? (\n            <>\n              <ActivityListItemPlaceholder />\n              <ActivityListItemPlaceholder />\n            </>) : (<InfiniteScroll\n              pageStart={0}\n              loadMore={handleGetNext}\n              hasMore={!loadingNext && !!pagination && pagination.currentPage < pagination.totalPages}\n              initialLoad={false}\n            >\n              <ActivityList />\n            </InfiniteScroll>)\n        }\n\n      </Grid.Column>\n      <Grid.Column width=\"6\">\n        <ActivityFilter />\n      </Grid.Column>\n      <Grid.Column width={10}>\n        <Loader active={loadingNext} />\n      </Grid.Column>\n    </Grid>\n  );\n});\n","import React from \"react\";\nimport { useField } from \"formik\";\nimport { Form, Label } from \"semantic-ui-react\";\n\ninterface Props {\n  placeholder: string;\n  name: string;\n  label?: string;\n  type?: string;\n}\n\nexport default function MyTextInput(props: Props) {\n  const [field, meta] = useField(props.name);\n  return (\n    <Form.Field error={meta.touched && !!meta.error}>\n      <label>{props.label}</label>\n      <input {...field} {...props} />\n      {meta.touched && meta.error ? (\n        <Label basic color=\"red\">\n          {meta.error}\n        </Label>\n      ) : null}\n    </Form.Field>\n  );\n}\n","import { ErrorMessage, Form, Formik } from \"formik\";\nimport { observer } from \"mobx-react-lite\";\nimport React from \"react\";\nimport { Button, Header, Label } from \"semantic-ui-react\";\nimport MyTextInput from \"../../app/common/form/MyTextInput\";\nimport { useStore } from \"../../app/stores/store\";\n\nexport default observer(function LoginForm() {\n  const { userStore } = useStore();\n  return (\n    <Formik\n      initialValues={{ email: \"\", password: \"\", error: null }}\n      onSubmit={(values, { setErrors }) =>\n        userStore\n          .login(values)\n          .catch((error) => setErrors({ error: \"Invalid email or password!\" }))\n      }\n    >\n      {({ handleSubmit, isSubmitting, errors }) => (\n        <Form className=\"ui form\" onSubmit={handleSubmit} autoComplete=\"off\">\n          <Header as={\"h2\"} content={\"Login to activities\"} color=\"teal\" textAlign=\"center\" />\n          <MyTextInput name=\"email\" placeholder=\"Email\" />\n          <MyTextInput name=\"password\" type=\"password\" placeholder=\"Password\" />\n          <ErrorMessage\n            name=\"error\"\n            render={() => (\n              <Label\n                basic\n                color=\"red\"\n                style={{ marginBottom: 10 }}\n                content={errors.error}\n              />\n            )}\n          />\n          <Button\n            loading={isSubmitting}\n            positive\n            content=\"Login\"\n            type=\"submit\"\n            fluid\n          />\n        </Form>\n      )}\n    </Formik>\n  );\n});\n","import React from \"react\";\nimport { Message } from \"semantic-ui-react\";\n\ninterface Props {\n  errors: any;\n}\n\nexport default function ValidationErrors({ errors }: Props) {\n  return (\n    <Message error>\n      {errors && (\n        <Message.List>\n          {errors.map((err: any, i: any) => (\n            <Message.Item key={i}>{err}</Message.Item>\n          ))}\n        </Message.List>\n      )}\n    </Message>\n  );\n}\n","import { ErrorMessage, Form, Formik } from \"formik\";\nimport { observer } from \"mobx-react-lite\";\nimport React from \"react\";\nimport { Button, Header } from \"semantic-ui-react\";\nimport MyTextInput from \"../../app/common/form/MyTextInput\";\nimport { useStore } from \"../../app/stores/store\";\nimport * as Yup from 'yup';\nimport ValidationErrors from \"../errors/ValidationErrors\";\n\nexport default observer(function RegisterForm() {\n  const { userStore } = useStore();\n  return (\n    <Formik\n      initialValues={{ displayName: '', username: '', email: \"\", password: \"\", error: null }}\n      onSubmit={(values, { setErrors }) =>\n        userStore\n          .register(values)\n          .catch((error) => setErrors({ error }))\n      }\n      validationSchema={Yup.object({\n          displayName: Yup.string().required(),\n          username: Yup.string().required(),\n          email: Yup.string().required().email(),\n          password: Yup.string().required(),\n      })}\n    >\n      {({ handleSubmit, isSubmitting, errors, isValid, dirty }) => (\n        <Form className=\"ui form\" onSubmit={handleSubmit} autoComplete=\"off\">\n          <Header as={\"h2\"} content={\"Sign up to activities\"} color=\"teal\" textAlign=\"center\" />\n          <MyTextInput name=\"displayName\" placeholder=\"Display name\" />\n          <MyTextInput name=\"username\" placeholder=\"Username\" />\n          <MyTextInput name=\"email\" placeholder=\"Email\" />\n          <MyTextInput name=\"password\" type=\"password\" placeholder=\"Password\" />\n          <ErrorMessage\n            name=\"error\"\n            render={() => (\n              <ValidationErrors errors={errors.error} />\n            )}\n          />\n          <Button\n            disabled={!dirty || !isValid || isSubmitting}\n            loading={isSubmitting}\n            positive\n            content=\"Register\"\n            type=\"submit\"\n            fluid\n          />\n        </Form>\n      )}\n    </Formik>\n  );\n});\n","import { observer } from \"mobx-react-lite\";\nimport React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { Button, Container, Header, Image, Segment } from \"semantic-ui-react\";\nimport { useStore } from \"../../app/stores/store\";\nimport LoginForm from \"../users/LoginForm\";\nimport RegisterForm from '../users/RegisterForm';\n\nexport default observer(function HomePage() {\n  const { userStore, modalStore } = useStore();\n  const { isLoggedIn, user } = userStore;\n  const { openModal } = modalStore;\n  return (\n    <Segment inverted textAlign=\"center\" vertical className=\"masthead\">\n      <Container text>\n        <Header as=\"h1\" inverted>\n          <Image\n            size=\"massive\"\n            src=\"/assets/logo.png\"\n            alt=\"logo\"\n            style={{ marginBottom: 12 }}\n          />\n          Activities\n        </Header>\n\n        {isLoggedIn && user && user.token ? (\n          <>\n            <Header as=\"h2\" inverted content={`Welcome back `} />\n            <Button as={Link} to=\"/activities\" size=\"huge\" inverted>\n              Go to activities!\n            </Button>\n          </>\n        ) : (\n          <>\n            <Header as=\"h2\" inverted content={`Welcome `} />\n            <Button\n              onClick={() => openModal(<LoginForm />)}\n              size=\"huge\"\n              inverted\n            >\n              Login\n            </Button>\n            <Button onClick={() => openModal(<RegisterForm />)} size='huge' inverted>\n            Register\n          </Button>\n          </>\n        )}\n      </Container>\n    </Segment>\n  );\n});\n","import React from 'react';\nimport { Dimmer, Loader } from 'semantic-ui-react';\n\ninterface Props {\n    inverted?: boolean;\n    content: string;\n}\n\nexport default function LoadingComponent({inverted = true, content = 'Loading...' }:Props) {\n    return (\n        <Dimmer active={true} inverted={inverted}>\n            <Loader content={content}/>\n        </Dimmer>\n    )\n}","import React from \"react\";\nimport { useField } from \"formik\";\nimport { Form, Label } from \"semantic-ui-react\";\n\ninterface Props {\n  placeholder: string;\n  name: string;\n  rows: number;\n  label?: string;\n}\n\nexport default function MyTextArea(props: Props) {\n  const [field, meta] = useField(props.name);\n  return (\n    <Form.Field error={meta.touched && !!meta.error}>\n      <label>{props.label}</label>\n      <input {...field} {...props} />\n      {meta.touched && meta.error ? (\n        <Label basic color=\"red\">\n          {meta.error}\n        </Label>\n      ) : null}\n    </Form.Field>\n  );\n}\n","import React from \"react\";\nimport { useField } from \"formik\";\nimport { Form, Label, Select } from \"semantic-ui-react\";\n\ninterface Props {\n  placeholder: string;\n  name: string;\n  options: any;\n  label?: string;\n}\n\nexport default function MySelectInput(props: Props) {\n  const [field, meta, helpers] = useField(props.name);\n  return (\n    <Form.Field error={meta.touched && !!meta.error}>\n      <label>{props.label}</label>\n      <Select\n        clearable\n        options={props.options}\n        value={field.value || null}\n        onChange={(e, d) => helpers.setValue(d.value)}\n        onBlur={() => helpers.setTouched(true)}\n        placeholder={props.placeholder}\n      />\n\n      {meta.touched && meta.error ? (\n        <Label basic color=\"red\">\n          {meta.error}\n        </Label>\n      ) : null}\n    </Form.Field>\n  );\n}\n","export const categoryOptions = [\n    { text: \"Culture\", value: \"culture\" },\n    { text: \"Drinks\", value: \"drinks\" },\n    { text: \"Film\", value: \"film\" },\n    { text: \"Food\", value: \"food\" },\n    { text: \"Music\", value: \"music\" },\n    { text: \"Travel\", value: \"travel\" },    \n];\n","import React from \"react\";\nimport { useField } from \"formik\";\nimport { Form, Label } from \"semantic-ui-react\";\nimport DatePicker, { ReactDatePickerProps } from 'react-datepicker';\n\nexport default function MyDateTimeInput(props: Partial<ReactDatePickerProps>) {\n  const [field, meta, helpers] = useField(props.name!);\n  return (\n    <Form.Field error={meta.touched && !!meta.error}>\n      <DatePicker \n        {...field}\n        {...props}\n        selected={(field.value && new Date(field.value)) || null}\n        onChange={value => helpers.setValue(value)}\n      />\n      {meta.touched && meta.error ? (\n        <Label basic color=\"red\">\n          {meta.error}\n        </Label>\n      ) : null}\n    </Form.Field>\n  );\n}\n","import { observer } from \"mobx-react-lite\";\nimport React, { useEffect, useState } from \"react\";\nimport { useHistory, useParams } from \"react-router\";\nimport { v4 as uuid } from \"uuid\";\nimport { Button, Header, Segment } from \"semantic-ui-react\";\nimport LoadingComponent from \"../../../app/layout/LoadingComponent\";\nimport { useStore } from \"../../../app/stores/store\";\nimport ValidationErrors from \"../../errors/ValidationErrors\";\nimport { Link } from \"react-router-dom\";\nimport { Formik, Form } from \"formik\";\nimport MyTextInput from \"../../../app/common/form/MyTextInput\";\nimport MyTextArea from '../../../app/common/form/MyTextArea';\nimport MySelectInput from '../../../app/common/form/MySelectInput';\nimport { categoryOptions } from '../../../app/common/options/categoryOptions'\nimport * as Yup from \"yup\";\nimport MyDateTimeInput from \"../../../app/common/form/MyDateTimeInput\";\nimport { ActivityFormValues } from \"../../../app/models/activity\";\n\nexport default observer(function ActivityForm() {\n  const history = useHistory();\n  const [errors, setErrors] = useState(null);\n  const { activityStore } = useStore();\n  const {\n    createActivity,\n    updateActivity,\n    loadActivity,\n    loadingInitial,\n  } = activityStore;\n  const { id } = useParams<{ id: string }>();\n  const [activity, setActivity] = useState<ActivityFormValues>(new ActivityFormValues());\n\n  const validationSchema = Yup.object({\n    title: Yup.string().required(),\n    description: Yup.string().required(),\n    categoty: Yup.string().required(),\n    date: Yup.date().required().nullable(),\n    city: Yup.string().required(),\n    venue: Yup.string().required(),\n  });\n\n  useEffect(() => {\n    if (id) loadActivity(id).then((activity) => setActivity(new ActivityFormValues(activity!)));\n  }, [id, loadActivity]);\n\n  function handleFormSubmit(activity: ActivityFormValues) {\n    if (!activity.id) {\n      let newActivity = {\n        ...activity,\n        id: uuid(),\n      };\n      createActivity(newActivity)\n        .then(() => {\n          history.push(`/activities/${newActivity.id}`);\n        })\n        .catch((err) => setErrors(err));\n    } else {\n      updateActivity(activity)\n        .then(() => {\n          history.push(`/activities/${activity.id}`);\n        })\n        .catch((err) => setErrors(err));\n    }\n  }\n\n  if (loadingInitial)\n    return <LoadingComponent content={\"Loading activity...\"} />;\n\n  return (\n    <Segment clearing>\n      <Header content='Activity Detail' sub color='teal' />\n      <Formik\n        validationSchema={validationSchema}\n        enableReinitialize\n        initialValues={activity}\n        onSubmit={(values) => {\n          handleFormSubmit(values);\n        }}\n      >\n        {({ handleSubmit, isValid, isSubmitting, dirty }) => (\n          <Form className=\"ui form\" onSubmit={handleSubmit} autoComplete=\"off\">\n            <MyTextInput name=\"title\" placeholder=\"Title\" />\n            <MyTextArea name=\"description\" placeholder=\"Description\" rows={4} />\n            <MySelectInput options={categoryOptions} name=\"category\" placeholder=\"Category\" />\n            <MyDateTimeInput \n              name=\"date\" \n              placeholderText=\"Date\" \n              showTimeSelect \n              timeCaption='time'\n              dateFormat='d MMMM yyyy hh:mm'\n              />\n            <Header content='Location Details' sub color='teal' />\n            <MyTextInput name=\"city\" placeholder=\"City\"/>\n            <MyTextInput name=\"venue\" placeholder=\"Venue\" />\n            <Button\n              disabled={isSubmitting || !dirty || !isValid}\n              loading={isSubmitting}\n              floated=\"right\"\n              positive\n              type=\"submit\"\n              content=\"Save\"\n            />\n            <Button\n              as={Link}\n              to=\"/activities\"\n              floated=\"right\"\n              type=\"button\"\n              content=\"Cancel\"\n            />\n          </Form>\n        )}\n      </Formik>\n      {errors && <ValidationErrors errors={errors} />}\n    </Segment>\n  );\n});\n","import { observer } from 'mobx-react-lite'\nimport React, { useEffect } from 'react'\nimport { Link } from 'react-router-dom';\nimport { Segment, Header, Comment, Loader } from 'semantic-ui-react';\nimport { useStore } from '../../../app/stores/store';\nimport { formatDistanceToNow } from 'date-fns';\nimport { Formik, Form, Field, FieldProps } from 'formik';\nimport * as Yup from 'yup';\n\ninterface Props {\n    activityId: string;\n}\n\nexport default observer(function ActivityDetailedChat({ activityId }: Props) {\n    const { commentStore } = useStore();\n\n    useEffect(() => {\n        if (activityId) {\n            commentStore.createHubConnection(activityId);\n        }\n        return () => {\n            commentStore.clearComments();\n        }\n    }, [commentStore, activityId])\n\n    return (\n        <>\n            <Segment\n                textAlign='center'\n                attached='top'\n                inverted\n                color='teal'\n                style={{ border: 'none' }}\n            >\n                <Header>Chat about this event</Header>\n            </Segment>\n            <Segment attached clearing>\n                <Formik\n                    onSubmit={(values, { resetForm }) => commentStore.addComment(values).then(() => resetForm())}\n                    initialValues={{ body: '' }}\n                    validationSchema={Yup.object({\n                        body: Yup.string().required()\n                    })}\n                >\n                    {({ isSubmitting, isValid, handleSubmit }) => {\n                        <Form className='ui form'>\n                            <Field name='body' >\n                                {(props: FieldProps) => (\n                                    <div style={{ position: 'relative' }}>\n                                        <Loader active={isSubmitting} />\n                                        <textarea\n                                            placeholder='Enter your comment (Enter to submit, Shift + Entrer for new line'\n                                            rows={2}\n                                            {...props.field}\n                                            onKeyPress={e => {\n                                                if (e.key === 'Enter' && e.shiftKey) {\n                                                    return;\n                                                }\n                                                if (e.key === 'Enter' && !e.shiftKey) {\n                                                    e.preventDefault();\n                                                    isValid && handleSubmit();\n                                                }\n                                            }}\n                                        />\n                                    </div>\n                                )}\n                            </Field>\n                        </Form>\n                    }}\n                </Formik>\n                <Comment.Group>\n                    {\n                        commentStore.comments.map(comment => (\n                            <>\n                                <Comment key={comment.id} >\n                                    <Comment.Avatar src={comment.image || '/assets/user.png'} />\n                                    <Comment.Content>\n                                        <Comment.Author as={Link} to={`/profiles/${comment.username}`}>\n                                            {comment.displayName}\n                                        </Comment.Author>\n                                        <Comment.Metadata>\n                                            <div>{formatDistanceToNow(comment.createdAt!)}</div>\n                                        </Comment.Metadata>\n                                        <Comment.Text style={{ whiteSpace: 'pre-wrap' }} >{comment.body}</Comment.Text>\n                                    </Comment.Content>\n                                </Comment>\n                            </>\n                        ))\n                    }\n                </Comment.Group>\n            </Segment>\n        </>\n    )\n})\n","import { format } from \"date-fns\";\nimport { observer } from \"mobx-react-lite\";\nimport React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { Button, Header, Item, Segment, Image, Label } from \"semantic-ui-react\";\nimport { Activity } from \"../../../app/models/activity\";\nimport { useStore } from \"../../../app/stores/store\";\n\nconst activityImageStyle = {\n  filter: \"brightness(30%)\",\n};\n\nconst activityImageTextStyle = {\n  position: \"absolute\",\n  bottom: \"5%\",\n  left: \"5%\",\n  width: \"100%\",\n  height: \"auto\",\n  color: \"white\",\n};\n\ninterface Props {\n  activity: Activity;\n}\n\nexport default observer(function ActivityDetailedHeader({ activity }: Props) {\n  const { activityStore: { updateAttendance, loading, cancelActivityToggle } } = useStore();\n\n  return (\n    <Segment.Group>\n      <Segment basic attached=\"top\" style={{ padding: \"0\" }}>\n        {activity.isCancelled &&\n          <Label style={{ position: 'absolute', zIndex: 1000, left: -14, top: 20 }}\n            ribbon color={'red'} content={'Cancelled'} />\n        }\n        <Image\n          src={`/assets/categoryImages/${activity.category}.jpg`}\n          fluid\n          style={activityImageStyle}\n        />\n        <Segment style={activityImageTextStyle} basic>\n          <Item.Group>\n            <Item>\n              <Item.Content>\n                <Header\n                  size=\"huge\"\n                  content={activity.title}\n                  style={{ color: \"white\" }}\n                />\n                <p>{format(activity.date!, \"dd MMM yyyy hh:mm\")}</p>\n                <p>\n                  Hosted by <strong>\n                    <Link to={`/profiles/${activity.host?.username}`}>\n                      {activity.host?.displayName}\n                    </Link>\n                  </strong>\n                </p>\n              </Item.Content>\n            </Item>\n          </Item.Group>\n        </Segment>\n      </Segment>\n      <Segment clearing attached=\"bottom\">\n        {activity.isHost ? (\n          <>\n            <Button color={activity.isCancelled ? 'green' : 'red'}\n              floated='left'\n              basic\n              content={activity.isCancelled ? 'Re-activate' : 'Cancel Activity'}\n              onClick={cancelActivityToggle}\n              loading={loading}\n            />\n            <Button as={Link}\n              disabled={activity.isCancelled}\n              color=\"orange\" floated=\"right\"\n              to={`/manage/${activity.id}`}>\n              Manage Event\n            </Button>\n          </>\n        ) : activity.isGoing ? (\n          <Button onClick={updateAttendance} loading={loading}>Cancel attendance</Button>\n        ) : (\n          <Button onClick={updateAttendance} \n            disabled={activity.isCancelled} \n            loading={loading} color=\"teal\">\n            Join Activity\n          </Button>\n        )}\n      </Segment>\n    </Segment.Group>\n  );\n});\n","import { format } from 'date-fns';\nimport { observer } from 'mobx-react-lite';\nimport React from 'react'\nimport {Segment, Grid, Icon} from 'semantic-ui-react'\nimport {Activity} from \"../../../app/models/activity\";\n\ninterface Props {\n    activity: Activity\n}\n\nexport default observer(function ActivityDetailedInfo({activity}: Props) {\n    return (\n        <Segment.Group>\n            <Segment attached='top'>\n                <Grid>\n                    <Grid.Column width={1}>\n                        <Icon size='large' color='teal' name='info'/>\n                    </Grid.Column>\n                    <Grid.Column width={15}>\n                        <p>{activity.description}</p>\n                    </Grid.Column>\n                </Grid>\n            </Segment>\n            <Segment attached>\n                <Grid verticalAlign='middle'>\n                    <Grid.Column width={1}>\n                        <Icon name='calendar' size='large' color='teal'/>\n                    </Grid.Column>\n                    <Grid.Column width={15}>\n            <span>\n              {format(activity.date!, 'dd MMM yyyy hh:mm')}\n            </span>\n                    </Grid.Column>\n                </Grid>\n            </Segment>\n            <Segment attached>\n                <Grid verticalAlign='middle'>\n                    <Grid.Column width={1}>\n                        <Icon name='map marker alternate' size='large' color='teal'/>\n                    </Grid.Column>\n                    <Grid.Column width={11}>\n                        <span>{activity.venue}, {activity.city}</span>\n                    </Grid.Column>\n                </Grid>\n            </Segment>\n        </Segment.Group>\n    )\n})\n","import React from \"react\";\nimport { Segment, List, Label, Item, Image, Header } from \"semantic-ui-react\";\nimport { Link } from \"react-router-dom\";\nimport { observer } from \"mobx-react-lite\";\nimport { Activity } from \"../../../app/models/activity\";\n\ninterface Props {\n  activity: Activity;\n}\n\nexport default observer(function ActivityDetailedSidebar({\n  activity: { attendees, host },\n}: Props) {\n  if (!attendees) return <Header as={\"h2\"} content={\"There is no attendee\"} />;\n  return (\n    <>\n      <Segment\n        textAlign=\"center\"\n        style={{ border: \"none\" }}\n        attached=\"top\"\n        secondary\n        inverted\n        color=\"teal\"\n      >\n        {attendees.length} {attendees.length === 1 ? \"Person\" : \"People\"} going\n      </Segment>\n      <Segment attached>\n        <List relaxed divided>\n          {attendees.map((attendee) => (\n            <Item style={{ position: \"relative\" }} key={attendee.username}>\n              {attendee.username === host?.username && (\n                <Label\n                  style={{ position: \"absolute\" }}\n                  color=\"orange\"\n                  ribbon=\"right\"\n                >\n                  Host\n                </Label>\n              )}\n              <Image size=\"tiny\" src={attendee.image || \"/assets/user.png\"} />\n              <Item.Content verticalAlign=\"middle\">\n                <Item.Header as=\"h3\">\n                  <Link to={`/profiles/${attendee.username}`}>\n                    {attendee.displayName}\n                  </Link>\n                </Item.Header>\n                {\n                  attendee.following && \n                  <Item.Extra style={{ color: \"orange\" }}>Following</Item.Extra>\n                }                \n              </Item.Content>\n            </Item>\n          ))}\n        </List>\n      </Segment>\n    </>\n  );\n});\n","import { observer } from \"mobx-react-lite\";\nimport React, { useEffect } from \"react\";\nimport { useParams } from \"react-router\";\nimport { Grid } from \"semantic-ui-react\";\nimport LoadingComponent from \"../../../app/layout/LoadingComponent\";\nimport { useStore } from \"../../../app/stores/store\";\nimport ActivityDetailedChat from \"./ActivityDetailedChat\";\nimport ActivityDetailedHeader from \"./ActivityDetailedHeader\";\nimport ActivityDetailedInfo from \"./ActivityDetailedInfo\";\nimport ActivityDetailedSidebar from \"./ActivityDetailedSidebar\";\n\nexport default observer(function ActivityDetails() {\n  const { activityStore } = useStore();\n  const {\n    selectedActivity: activity,\n    loadActivity,\n    loadingInitial,\n    clearSelectedActivity\n  } = activityStore;\n  const { id } = useParams<{ id: string }>();\n\n  useEffect(() => {\n    if (id) loadActivity(id);\n    return () => clearSelectedActivity();\n  }, [id, loadActivity, clearSelectedActivity]);\n\n  if (loadingInitial || !activity)\n    return <LoadingComponent content=\"Loading...\" />;\n\n  return (\n    <Grid>\n      <Grid.Column width={10}>\n        <ActivityDetailedHeader activity={activity} />\n        <ActivityDetailedInfo activity={activity} />\n        <ActivityDetailedChat activityId={activity.id} />\n      </Grid.Column>\n      <Grid.Column width={6}>\n        <ActivityDetailedSidebar activity={activity} />\n      </Grid.Column>\n    </Grid>\n  );\n});\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { Button, Header, Icon, Segment } from 'semantic-ui-react';\n\nexport default function NotFound() {\n    return(\n        <Segment placeholder>\n            <Header icon>\n                <Icon name='search' />\n                Oops - we've looked everywhere and could not find this.\n            </Header>\n            <Segment.Inline>\n                <Button as={Link} to='/activities' primary>\n                    Return to activities page\n                </Button>\n            </Segment.Inline>\n        </Segment>\n    );\n}","import { observer } from \"mobx-react-lite\";\nimport React from \"react\";\nimport { Container, Header, Segment } from \"semantic-ui-react\";\nimport { useStore } from \"../../app/stores/store\";\n\nexport default observer(function ServerError() {\n  const { commonStore } = useStore();\n  return (\n    <Container>\n      <Header as=\"h1\" content=\"Server Error\" />\n      <Header sub as=\"h5\" color=\"red\" content={commonStore.error?.message} />\n      {commonStore.error?.details && (\n        <Segment>\n          <Header as=\"h4\" content=\"Stack trace\" color=\"teal\" />\n          <code style={{ marginTop: \"10px\" }}>{commonStore.error.details}</code>\n        </Segment>\n      )}\n    </Container>\n  );\n});\n","import { observer } from \"mobx-react-lite\";\nimport React from \"react\";\nimport { Modal } from \"semantic-ui-react\";\nimport { useStore } from \"../../stores/store\";\n\nexport default observer(function ModalContainer() {\n    const { modalStore } = useStore();\n\n    return (\n      <Modal open={modalStore.modal.open}\n        onClose={modalStore.closeModal}\n        size=\"mini\" >\n        <Modal.Content>\n            {modalStore.modal.body}\n        </Modal.Content>\n      </Modal>\n    );\n})\n","import { Redirect, Route, RouteComponentProps, RouteProps } from \"react-router\";\nimport { useStore } from \"../stores/store\";\n\ninterface Props extends RouteProps {\n  component:\n    | React.ComponentType<RouteComponentProps<any>>\n    | React.ComponentType<any>;\n}\n\nexport default function PrivateRoute({ component: Component, ...rest }: Props) {\n  const {\n    userStore: { isLoggedIn },\n  } = useStore();\n\n  return (\n    <Route\n      {...rest}\n      render={(props) =>\n        isLoggedIn ? <Component {...props} /> : <Redirect to=\"\" />\n      }\n    />\n  );\n}\n","import React, { useEffect } from \"react\";\nimport { Container } from \"semantic-ui-react\";\nimport NavBar from \"./NavBar\";\nimport ActivityDashboard from \"../../features/activities/dashboard/ActivityDashboard\";\nimport HomePage from \"../../features/home/HomePage\";\nimport { observer } from \"mobx-react-lite\";\nimport { Route, Switch, useLocation } from \"react-router\";\nimport ActivityForm from \"../../features/activities/form/ActivityForm\";\nimport ActivityDetails from \"../../features/activities/details/ActivityDetails\";\nimport NotFound from \"../../features/errors/NotFound\";\nimport ServerError from \"../../features/errors/ServerError\";\nimport { ToastContainer } from \"react-toastify\";\nimport { useStore } from \"../stores/store\";\nimport LoadingComponent from \"./LoadingComponent\";\nimport ModalContainer from \"../common/modals/ModalContainer\";\nimport PrivateRoute from \"../layout/PrivateRoute\";\n\nfunction App() {\n  const location = useLocation();\n  const { commonStore, userStore } = useStore();\n\n  useEffect(() => {\n    if (commonStore.token) {\n      userStore.getUser().finally(() => commonStore.setAppLoaded());\n    } else {\n      commonStore.setAppLoaded();\n    }\n  }, [commonStore, userStore]);\n\n  if (!commonStore.appLoaded)\n    return <LoadingComponent content=\"Loading app...\" />;\n\n  return (\n    <>\n      <ToastContainer position=\"bottom-right\" hideProgressBar />\n      <ModalContainer />\n      <Route exact path=\"/\" component={HomePage} />\n      <Route\n        path={\"/(.+)\"}\n        render={() => (\n          <>\n            <NavBar />\n            <Container style={{ marginTop: \"7em\" }}>\n              <Switch>\n                <PrivateRoute\n                  exact\n                  path=\"/activities\"\n                  component={ActivityDashboard}\n                />\n                <PrivateRoute\n                  path=\"/activities/:id\"\n                  component={ActivityDetails}\n                />\n                <PrivateRoute\n                  key={location.key}\n                  path={[\"/createActivity\", \"/manage/:id\"]}\n                  component={ActivityForm}\n                />\n                <PrivateRoute path=\"/server-error\" component={ServerError} />\n                <Route component={NotFound} />\n              </Switch>\n            </Container>\n          </>\n        )}\n      />\n    </>\n  );\n}\n\nexport default observer(App);\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { useEffect } from \"react\";\nimport { useLocation } from \"react-router-dom\";\n\nexport default function ScrollToTop() {\n  const { pathname } = useLocation();\n\n  useEffect(() => {\n    window.scrollTo(0, 0);\n  }, [pathname]);\n\n  return null;\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './app/layout/styles.css';\nimport App from './app/layout/App';\nimport reportWebVitals from './reportWebVitals';\nimport 'semantic-ui-css/semantic.min.css';\nimport 'react-toastify/dist/ReactToastify.css';\nimport 'react-datepicker/dist/react-datepicker.css';\nimport 'react-calendar/dist/Calendar.css';\nimport { store, StoreContext } from './app/stores/store';\nimport { Router } from 'react-router-dom';\nimport { createBrowserHistory } from 'history';\nimport ScrollToTop from './app/layout/ScrollToTop';\n\nexport const history = createBrowserHistory();\n\nReactDOM.render(\n  <StoreContext.Provider value={store}>\n    <Router history={history}>\n      <ScrollToTop />\n      <App />\n    </Router>\n  </StoreContext.Provider>,\n\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}